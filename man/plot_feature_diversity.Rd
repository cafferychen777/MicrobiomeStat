% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plot_feature_diversity.R
\name{plot_feature_diversity}
\alias{plot_feature_diversity}
\title{Visualize the relative abundance of selected taxa or functions}
\usage{
plot_feature_diversity(
  data.obj,
  group.var = NULL,
  strata.var = NULL,
  subject.var = NULL,
  time.var = NULL,
  time.point.plot,
  is.plot.change = TRUE,
  feature.change.func = "relative change",
  feature.level = NULL,
  feature.dat.type = c("count", "proportion", "other"),
  features.plot = NULL,
  prop.to.lump = 1e-04,
  top.k.plot = NULL,
  top.k.func = NULL,
  plot.other = TRUE,
  renormalize = FALSE,
  plot.scheme = c("combined", "individual"),
  plot.type = c("barplot", "dotplot", "areaplot", "heatmap", "spaghettiplot", "boxplot",
    "scatterplot")
)
}
\arguments{
\item{data.obj}{A list object in a format specific to MicrobiomeStat, which can include components such as feature.tab (matrix), feature.ann (matrix), meta.dat (data.frame), tree, and feature.agg.list (list). The data.obj can be converted from other formats using several functions from the MicrobiomeStat package, including: 'mStat_convert_DGEList_to_data_obj', 'mStat_convert_DESeqDataSet_to_data_obj', 'mStat_convert_phyloseq_to_data_obj', 'mStat_convert_SummarizedExperiment_to_data_obj', 'mStat_import_qiime2_as_data_obj', 'mStat_import_mothur_as_data_obj', 'mStat_import_dada2_as_data_obj', and 'mStat_import_biom_as_data_obj'. Alternatively, users can construct their own data.obj. Note that not all components of data.obj may be required for all functions in the MicrobiomeStat package.}

\item{group.var}{A string indicating the variable for group identifiers. Default is NULL.}

\item{strata.var}{A string indicating the variable for strata identifiers. Default is NULL.}

\item{subject.var}{Character string specifying the subject variable in meta.dat}

\item{time.var}{Character string specifying the time variable in meta.dat}

\item{time.point.plot}{Character vector specifying time points to plot}

\item{is.plot.change}{Logical, whether to plot change from baseline.
This parameter is only effective when there are multiple time points
(i.e., length(time.point.plot) > 1). If there's only one time point,
this parameter has no effect.}

\item{feature.change.func}{The method or function used to calculate the change in feature abundance between time points.
The following options are supported:

- "relative change": Computes the relative change as (time_2 - time_1) / (time_2 + time_1). If both values are zero, the result is zero.
- "log fold change": Computes the log2 fold change between time points. Zero values are imputed as half the minimum nonzero value of the respective feature at the given time point before taking the logarithm.
- "absolute change": Computes the absolute difference between time points.
- A custom function: The provided function should take two numeric vectors as input (values at time 1 and time 2) and return a numeric vector of differences. Users should ensure that their function handles zero values appropriately.

If an unrecognized value or no value is provided for `feature.change.func`, the default behavior will be to compute the absolute difference between time points.}

\item{feature.level}{The column name in the feature annotation matrix (feature.ann) of data.obj
to use for summarization and plotting. This can be the taxonomic level like "Phylum", or any other
annotation columns like "Genus" or "OTU_ID". Should be a character vector specifying one or more
column names in feature.ann. Multiple columns can be provided, and data will be plotted separately
for each column. Default is NULL, which defaults to all columns in feature.ann if `features.plot`
is also NULL.}

\item{feature.dat.type}{The type of the feature data, which determines how the data is handled in downstream analyses.
Should be one of:
- "count": Raw count data, will be normalized by the function.
- "proportion": Data that has already been normalized to proportions/percentages.
- "other": Custom abundance data that has unknown scaling. No normalization applied.
The choice affects preprocessing steps as well as plot axis labels.
Default is "count", which assumes raw OTU table input.}

\item{features.plot}{A character vector specifying which feature IDs (e.g. OTU IDs) to plot.
Default is NULL.}

\item{prop.to.lump}{Numeric, features with mean proportion less than this will be lumped into "other"}

\item{top.k.plot}{Integer, plot top k features based on some criterion}

\item{top.k.func}{Function to order the features}

\item{plot.other}{Logical, whether to plot the "other" category}

\item{renormalize}{Logical, whether to renormalize data after removing "other" category}

\item{plot.scheme}{Character string specifying the plot scheme, one of c("combined", "individual")}

\item{plot.type}{Character string specifying the plot type, one of c("barplot", "dotplot", "areaplot", "heatmap", "spaghettiplot", "boxplot", "scatterplot")}
}
\value{
A list of ggplot objects
}
\description{
This function generates various types of plots to visualize the relative abundance
of selected taxa or functions in microbiome data. It supports different visualization
schemes and plot types for both cross-sectional and longitudinal data.
}
\details{
This function provides a flexible framework for visualizing microbiome data.
It can handle both cross-sectional and longitudinal data, and offers various plot types
including bar plots, dot plots, area plots, heatmaps, spaghetti plots, box plots, and scatter plots.
The function can also visualize changes over time and supports different grouping and stratification options.
}
\examples{
\donttest{
data(ecam.obj)
plot_feature_diversity(
data.obj = ecam.obj,
group.var = "antiexposedall",
strata.var = NULL,
time.var = "month",
time.point.plot = unique(ecam.obj$meta.dat$month)[1],
is.plot.change = TRUE,
feature.level = c("Phylum", "Family", "Genus"),
feature.dat.type = "proportion",
features.plot = NULL,
prop.to.lump = 0.0001,
top.k.plot = NULL,
top.k.func = NULL,
renormalize = FALSE,
plot.other = TRUE,
plot.scheme = "combined",
plot.type = "barplot"
)

plot_feature_diversity(
data.obj = ecam.obj,
group.var = "antiexposedall",
strata.var = "delivery",
time.var = "month",
time.point.plot = unique(ecam.obj$meta.dat$month)[1],
is.plot.change = TRUE,
feature.level = c("Phylum", "Family", "Genus"),
feature.dat.type = "proportion",
features.plot = NULL,
prop.to.lump = 0.0001,
top.k.plot = NULL,
top.k.func = NULL,
renormalize = FALSE,
plot.other = TRUE,
plot.scheme = "combined",
plot.type = "barplot"
)

plot_feature_diversity(
data.obj = ecam.obj,
group.var = "antiexposedall",
strata.var = "delivery",
time.var = "month",
time.point.plot = unique(ecam.obj$meta.dat$month)[1],
is.plot.change = TRUE,
feature.level = c("Phylum"),
feature.dat.type = "proportion",
features.plot = ecam.obj$feature.ann[,"Phylum"][1:3],
prop.to.lump = 0.0001,
top.k.plot = NULL,
top.k.func = NULL,
renormalize = FALSE,
plot.other = TRUE,
plot.scheme = "combined",
plot.type = "barplot"
)

plot_feature_diversity(
data.obj = ecam.obj,
group.var = "antiexposedall",
strata.var = "delivery",
time.var = "month",
time.point.plot = unique(ecam.obj$meta.dat$month)[1],
is.plot.change = TRUE,
feature.level = c("Phylum", "Family", "Genus"),
feature.dat.type = "proportion",
features.plot = NULL,
prop.to.lump = 0.0001,
top.k.plot = NULL,
top.k.func = NULL,
renormalize = FALSE,
plot.other = TRUE,
plot.scheme = "combined",
plot.type = "dotplot"
)

plot_feature_diversity(
data.obj = ecam.obj,
group.var = "antiexposedall",
strata.var = "delivery",
time.var = "month",
time.point.plot = unique(ecam.obj$meta.dat$month)[1],
is.plot.change = TRUE,
feature.level = c("Phylum", "Family", "Genus"),
feature.dat.type = "proportion",
features.plot = NULL,
prop.to.lump = 0.0001,
top.k.plot = NULL,
top.k.func = NULL,
renormalize = FALSE,
plot.other = TRUE,
plot.scheme = "combined",
plot.type = "heatmap"
)

plot_feature_diversity(
data.obj = ecam.obj,
group.var = "antiexposedall",
strata.var = "delivery",
time.var = "month",
time.point.plot = unique(ecam.obj$meta.dat$month)[1],
is.plot.change = TRUE,
feature.level = c("Phylum", "Family", "Genus"),
feature.dat.type = "proportion",
features.plot = NULL,
prop.to.lump = 0.0001,
top.k.plot = NULL,
top.k.func = NULL,
renormalize = FALSE,
plot.other = TRUE,
plot.scheme = "combined",
plot.type = "boxplot"
)

plot_feature_diversity(
data.obj = ecam.obj,
group.var = "antiexposedall",
strata.var = "delivery",
time.var = "month",
time.point.plot = unique(ecam.obj$meta.dat$month)[1],
is.plot.change = TRUE,
feature.level = c("Phylum", "Family", "Genus"),
feature.dat.type = "proportion",
features.plot = NULL,
prop.to.lump = 0.0001,
top.k.plot = NULL,
top.k.func = NULL,
renormalize = FALSE,
plot.other = TRUE,
plot.scheme = "individual",
plot.type = "boxplot"
)

data(peerj32.obj)
plot_feature_diversity(
data.obj = peerj32.obj,
group.var = "group",
strata.var = "sex",
subject.var = "subject",
time.var = "time",
time.point.plot = c("1", "2"),
is.plot.change = TRUE,
feature.change.func = "relative change",
feature.level = c("Phylum", "Family", "Genus"),
prop.to.lump = 0.0001,
top.k.plot = NULL,
top.k.func = NULL,
renormalize = FALSE,
plot.other = TRUE,
plot.scheme = "combined",
plot.type = "boxplot"
)

plot_feature_diversity(
data.obj = peerj32.obj,
group.var = "group",
strata.var = "sex",
subject.var = "subject",
time.var = "time",
time.point.plot = c("1", "2"),
is.plot.change = TRUE,
feature.change.func = "relative change",
feature.level = c("Phylum", "Family", "Genus"),
prop.to.lump = 0.0001,
top.k.plot = NULL,
top.k.func = NULL,
renormalize = FALSE,
plot.other = TRUE,
plot.scheme = "individual",
plot.type = "boxplot"
)

plot_feature_diversity(
data.obj = peerj32.obj,
group.var = "group",
strata.var = "sex",
subject.var = "subject",
time.var = "time",
time.point.plot = c("1", "2"),
is.plot.change = TRUE,
feature.change.func = "relative change",
feature.level = c("Phylum", "Family", "Genus"),
prop.to.lump = 0.0001,
top.k.plot = NULL,
top.k.func = NULL,
renormalize = FALSE,
plot.other = TRUE,
plot.scheme = "combined",
plot.type = "heatmap"
)

plot_feature_diversity(
data.obj = peerj32.obj,
group.var = "group",
strata.var = "sex",
subject.var = "subject",
time.var = "time",
time.point.plot = c("1", "2"),
is.plot.change = FALSE,
feature.change.func = "relative change",
feature.level = c("Phylum", "Family", "Genus"),
prop.to.lump = 0.0001,
top.k.plot = NULL,
top.k.func = NULL,
renormalize = FALSE,
plot.other = TRUE,
plot.scheme = 'combined',
plot.type = "heatmap"
)

plot_feature_diversity(
data.obj = peerj32.obj,
group.var = "group",
strata.var = "sex",
subject.var = "subject",
time.var = "time",
time.point.plot = c("1", "2"),
is.plot.change = FALSE,
feature.level = c("Phylum", "Family", "Genus"),
prop.to.lump = 0.0001,
top.k.plot = NULL,
top.k.func = NULL,
renormalize = FALSE,
plot.other = TRUE,
plot.scheme = 'individual',
plot.type = "boxplot"
)

plot_feature_diversity(
data.obj = peerj32.obj,
group.var = "group",
strata.var = "sex",
subject.var = "subject",
time.var = "time",
time.point.plot = c("1", "2"),
is.plot.change = FALSE,
feature.level = c("Phylum", "Family", "Genus"),
prop.to.lump = 0.0001,
top.k.plot = NULL,
top.k.func = NULL,
renormalize = FALSE,
plot.other = TRUE,
plot.scheme = 'combined',
plot.type = "barplot"
)

plot_feature_diversity(
data.obj = peerj32.obj,
group.var = "group",
strata.var = "sex",
subject.var = "subject",
time.var = "time",
time.point.plot = c("1", "2"),
is.plot.change = FALSE,
feature.level = c("Family"),
features.plot = unique(peerj32.obj$feature.ann[, "Family"])[11:20],
prop.to.lump = 0.0001,
top.k.plot = NULL,
top.k.func = NULL,
renormalize = FALSE,
plot.other = TRUE,
plot.scheme = 'combined',
plot.type = "barplot"
)

plot_feature_diversity(
data.obj = peerj32.obj,
group.var = "group",
strata.var = "sex",
subject.var = "subject",
time.var = "time",
time.point.plot = c("1", "2"),
is.plot.change = FALSE,
feature.level = c("Family"),
prop.to.lump = 0.0001,
top.k.plot = NULL,
top.k.func = NULL,
renormalize = FALSE,
plot.other = TRUE,
plot.scheme = 'combined',
plot.type = "dotplot"
)

data(subset_T2D.obj)
plot_feature_diversity(
data.obj = subset_T2D.obj,
group.var = "sample_body_site",
strata.var = "subject_race",
subject.var = "subject_id",
time.var = "visit_number_num",
time.point.plot = unique(subset_T2D.obj$meta.dat$visit_number_num),
is.plot.change = FALSE,
feature.level = c("Family"),
prop.to.lump = 0.0001,
top.k.plot = NULL,
top.k.func = NULL,
renormalize = FALSE,
plot.other = TRUE,
plot.scheme = 'combined',
plot.type = "barplot"
)

plot_feature_diversity(
data.obj = subset_T2D.obj,
group.var = "sample_body_site",
strata.var = "subject_race",
subject.var = "subject_id",
time.var = "visit_number_num",
time.point.plot = unique(subset_T2D.obj$meta.dat$visit_number_num),
is.plot.change = FALSE,
feature.level = c("Family"),
features.plot = unique(subset_T2D.obj$feature.ann[, "Family"])[1:10],
prop.to.lump = 0.0001,
top.k.plot = NULL,
top.k.func = NULL,
renormalize = FALSE,
plot.other = TRUE,
plot.scheme = 'combined',
plot.type = "barplot"
)

plot_feature_diversity(
data.obj = subset_T2D.obj,
group.var = "sample_body_site",
strata.var = "subject_race",
subject.var = "subject_id",
time.var = "visit_number_num",
time.point.plot = unique(subset_T2D.obj$meta.dat$visit_number_num),
features.plot = unique(subset_T2D.obj$feature.ann[, "Family"])[1:10],
is.plot.change = FALSE,
feature.level = c("Family"),
prop.to.lump = 0.0001,
top.k.plot = NULL,
top.k.func = NULL,
renormalize = FALSE,
plot.other = TRUE,
plot.scheme = 'combined',
plot.type = "areaplot"
)

plot_feature_diversity(
data.obj = subset_T2D.obj,
group.var = "sample_body_site",
strata.var = "subject_race",
subject.var = "subject_id",
time.var = "visit_number_num",
time.point.plot = unique(subset_T2D.obj$meta.dat$visit_number_num),
is.plot.change = FALSE,
feature.level = c("Family"),
prop.to.lump = 0.0001,
top.k.plot = NULL,
top.k.func = NULL,
renormalize = FALSE,
plot.other = TRUE,
plot.scheme = 'combined',
plot.type = "spaghettiplot"
)

plot_feature_diversity(
data.obj = subset_T2D.obj,
group.var = "sample_body_site",
strata.var = "subject_race",
subject.var = "subject_id",
time.var = "visit_number_num",
time.point.plot = unique(subset_T2D.obj$meta.dat$visit_number_num),
is.plot.change = FALSE,
feature.level = c("Family"),
prop.to.lump = 0.0001,
top.k.plot = NULL,
top.k.func = NULL,
renormalize = FALSE,
plot.other = TRUE,
plot.scheme = 'individual',
plot.type = "spaghettiplot"
)

plot_feature_diversity(
data.obj = subset_T2D.obj,
group.var = "sample_body_site",
strata.var = "subject_race",
subject.var = "subject_id",
time.var = "visit_number_num",
time.point.plot = unique(subset_T2D.obj$meta.dat$visit_number_num),
is.plot.change = FALSE,
feature.level = c("Family"),
prop.to.lump = 0.0001,
top.k.plot = NULL,
top.k.func = NULL,
renormalize = FALSE,
plot.other = TRUE,
plot.scheme = 'combined',
plot.type = "heatmap"
)

plot_feature_diversity(
data.obj = subset_T2D.obj,
group.var = "sample_body_site",
strata.var = "subject_race",
subject.var = "subject_id",
time.var = "visit_number_num",
time.point.plot = unique(subset_T2D.obj$meta.dat$visit_number_num),
is.plot.change = TRUE,
feature.level = c("Family"),
prop.to.lump = 0.0001,
top.k.plot = NULL,
top.k.func = NULL,
renormalize = FALSE,
plot.other = TRUE,
plot.scheme = 'combined',
plot.type = "heatmap"
)

plot_feature_diversity(
data.obj = subset_T2D.obj,
group.var = "sample_body_site",
strata.var = "subject_race",
subject.var = "subject_id",
time.var = "visit_number_num",
time.point.plot = unique(subset_T2D.obj$meta.dat$visit_number_num),
is.plot.change = FALSE,
feature.level = c("Family"),
prop.to.lump = 0.0001,
top.k.plot = NULL,
top.k.func = NULL,
renormalize = FALSE,
plot.other = TRUE,
plot.scheme = 'combined',
plot.type = "boxplot"
)

plot_feature_diversity(
data.obj = subset_T2D.obj,
group.var = "sample_body_site",
strata.var = "subject_race",
subject.var = "subject_id",
time.var = "visit_number_num",
time.point.plot = unique(subset_T2D.obj$meta.dat$visit_number_num),
is.plot.change = FALSE,
feature.level = c("Family"),
prop.to.lump = 0.0001,
top.k.plot = NULL,
top.k.func = NULL,
renormalize = FALSE,
plot.other = TRUE,
plot.scheme = 'individual',
plot.type = "boxplot"
)
}
}
